npm run build


何をメインに据えるか
  要素のProceduralな生成
    shape
    material
    movement
  レンダリング
    ComputeShaderが使えないので無理そう
最終的に何を出力するか
  Proceduralな生成の強みは
  Blenderのモディファイアを使った表現を参考に
  鉄橋, レンガ橋
  繰り返しの装飾
  無限長


TODO
now: リファクタリング
future:
  Drawable同士のUnion,SmoothUnion
  Displace
  Voronoi
    座標変換(Displace)になる
  橋
  いろいろ動かす
    時間依存shape, material
      時間依存のパラメータを計算後にuniformとして渡す方がいいか
    Inverse Kinematics
soooooon:
  jest-webgl-canvas-mock
  曲率近似AmbientSelfOcclusion
  曲率依存の汚れマテリアル
  L-System?
    TypeScript側で再帰し、GLSL側には単にUnionなどとして渡す?
  physics based rendering (material)
  面光源
    photon.ray.start が random_uniform に従う?
  glslify-loader
  template-literals-loader
  (webasm + spir-v) へのコンパイル
    LLVM-SPIRV-BackendがKhronosから出てる
    Rust-gpuでやりたいな
  ComputeShader
    Monte-carlo ray-trace
    Photon-mapping
    Screen-space effects
    波のGPUシミュレーション


後で必要になりそうなもの
Texture
  Reduce
    GlClosure<A,A,A>
  Map
    GlClosure<A, A>
  Displace
    GlClosure<Vec3, Vec3>

リファクタリング
  GlType
    TexturePatch
  TextureのGlClosure対応
  TransformはGlTypeか?
  GlClosureの利用
    Transform
      transformAsClosure: GlClosure<GlVec3, GlVec3>
      inverseAsClosure: GlClosure<GlVec3, GlVec3>
  Simplex3Coordの継承メソッドがSimplex3Coordを返すようにしたい
    GlVec3なども同様
    ReturnType<typeof this>?
  hash32を取るとき、saltを与える?
  NormalMap, BumpMap は material では
  NormalMapはVec3Fieldを取る?
  Coordination
    Polar
      radius, yaw, pitch
    Simplex
      x, y, z
  util.glsl swapをマクロで宣言+定義

リファクタリング(対処が分かり次第)
  GlClosure0Args, GlClosure1Args, GlClosure2Args,... をまとめたい
  Simplex.neighborsあたりなんかバグありそう

マクロ vs TypeScript
  配列の長さごとに宣言/定義してるやつをマクロにする?
  ジェネリクス的なやつも型名を取るマクロで?


球状のウェーブレット(のようなもの)fr
  4次関数v(r)を使って、v(clamp(r, 0.0, 1.0))
    v : +c4*r**4 +c3*r**3 +c2*r**2 +c1*r +c0 $
    dv_dr : diff(v,r)$
    eqn : [
      ev(v, r=0) = 1,
      ev(v, r=1) = 0,
      ev(dv_dr, r=0) = 0,
      ev(dv_dr, r=1) = 0,
      integrate( integrate(v*r, r,0,1), a,0,2*%pi) = 0 /*circular*/
      /*integrate( integrate( integrate(v*sin(b)*r**2, r,0,1), a,0,2*%pi), b,0,%pi) = 0*/ /*spherical*/
    ]$
    solve(eqn, [c4, c3, c2, c1, c0]);
    /* circular : [c4=−9, c3=20, c2=−12, c1=0, c0=1] */
    /* spherical : [c4=−7, c3=16, c2=−10, c1=0, c0=1] */

クロージャが渡せない場合のソート
  evaluate(targets[index]) = value とする
  ソート関数に渡す
    value配列、targets配列を渡す
    index配列を作る
    value配列で比較し、index配列とvalue配列を並べ替える
    targets配列をindex配列に従い並べ替える

可変長配列が使えない場合のソート
  最大長のソートを用意する
  最大長配列にコピーして部分的にソート

InigoQuilez: FBM detail in SDFs
  入れ子
  shapeFBMのShapesRand
    距離関数がおかしくなってそう(無限ループバグの元)

findNearestDrawable
rayCastのl + obj_distance < EPS となるものは無視?

オブジェクトの重なり
オブジェクトが重なる位置において、どのオブジェクトの情報を返すか
優先度を設定し、自動的にDefferenceを行う?

findMedium
物体から出る(dot(ray.direction,法線)>0)時に使う
距離が負かつ最も大きいもの(絶対値が小さい)ものを媒質とする
今まで居た物質は無視
物体に入る(dot(ray.direction,法線<0))ときは当たった面のものを使えばよい

ray-marching
  反射/屈折後に2*EPSだけ進める?

屈折光のray-marchingどうする?
  距離関数が負のとき
    陰面消去の判定を反転
    距離の符号を反転
  反射するか屈折するかを乱数で



パストレーシング、計算誤差の影響が結構大きい(ray.directionの精度?)

GPUの性能が厳しい
  Intel UHD Graphics 620
  Intel Iris Xe Graphics
  CPU内蔵のグラフィック機能でレイマーチングを回すのがそもそも厳しいか
  WebGL conformance test
    https://www.khronos.org/registry/webgl/sdk/tests/webgl-conformance-tests.html?version=2.0.1



右手系の座標を扱う: cross(x,y) = z

環境光(ambient)
  色も強度も一定
拡散反射(diffuse, ランバート反射)
  photon入射ベクトルと面の法線で決まる
  視線は関係なし
鏡面反射(specular, 鏡面ハイライト-ガウス分布)
  視線と入射ベクトルと面の法線で決まる
  強度変化のみ、色の変化なし

入射光エネルギー = absorption + (1-drain)( metalness + (1-metalness)( (1-transparency) + transparency ) )
  absorption(extinction): 吸収
  metalness: 鏡面反射
  transparency: 屈折透過
refraction: 屈折率
  metalnessは媒質の屈折率から求められるが、入射前/入射後両方の値が必要になる
  屈折率を必ず持つか、持たないなら0と仮定するなどが必要になってくる


球面ガウス関数による近似?



モデル形状はOpenSCADで確認しながら作るほうが楽かも

npm init
npm install webpack webpack-cli -D
npm install typescript ts-loader -D
npm install raw-loader -D
/*
npm install glslify glslify-import -D
npm install glslify-loader glslify-import-loader -D
npm install template-literals-loader -D
*/


WebGL系は諸々古くて性能が厳しい
  WebGPUの方がよい(Canary限定)
  Vulkanなどもあり


TypeScriptのコンストラクタ
  コンストラクタ引数にアクセス修飾子を付けると
    this.foo = foo を書かなくていい
    メンバ宣言も省略できる
  メンバ宣言省略はメンバ確認に難が出るのでしない方がよいのでは

Glslポリモーフィズム
  GlEntityでやる
  glslにラッパー関数を持たずにマクロで実関数に書き換えるほうが速いか？
    インライン展開してくれるならこの配慮は不要だが

GLSL
ポインタが無い(in/out修飾子を使う)
関数ポインタも無い
  idで地道に分岐(あるいは*0)する
オーバーロードは可
typedefが無い
  ただしstructはいちいち付けなくていい
mat系の添え字は[列][行]の順なので注意
円周率定義なし。PI = radians(180)
キャスト演算子なし。float(num)のように書く
構造体にはデフォルトコンストラクタが設定される
  Type s = {menbers...} スタイルは利用できない
整数は32bitまで


GLSLのテンプレートを別ファイルで保持、TypeScriptにテンプレートリテラルとしてimport
  template-literals-loader
  raw-loaderでtextとして読んでtemplate-literalとして評価
GLSLのプリプロセッサも利用できる
  #define FUNC_id(func, id, args) (func_##id args)

GLSLを複数のファイルに分割する
  glslify, glslify-import, glslify-loader
  use[template-literals-loader, glslify-loader] でいけるか?
